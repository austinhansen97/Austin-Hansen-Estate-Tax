{"version":3,"sources":["components/topTitle&Form/Button.js","components/clientTiles&Sides/Graph.js","components/clientTiles&Sides/User.js","components/clientTiles&Sides/UserJob.js","components/clientTiles&Sides/TileCard.js","components/clientTiles&Sides/TileAreaContent.js","components/TileArea.js","App.js","index.js"],"names":["Button","props","buttonArray","useState","task","setTask","description","setDescription","className","onSubmit","event","preventDefault","getDiv","type","value","onChange","target","autoFocus","required","min","step","placeholder","undefined","Graph","barFillWidth","Math","round","endBorder","nonTaxableEstateValue","Number","toLocaleString","taxableEstateValue","totalValue","style","width","borderRight","User","UserJob","newEstate","aboveText","taxesText","TileCard","TileAreaContent","numDisplay","totalTax","toFixed","counter","item","map","mapArray","clientRecent","TileArea","cardFromButton","console","log","getToApp","dataObject","App","data","newData","newCardArray","previousData","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.65b62bbb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport \"./Button.css\";\n\n//states to change values\nfunction Button(props) {\n  const [task, setTask] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  //values typed into card\n  function taskHandler(event) {\n    setTask(event.target.value);\n  }\n\n  function descriptionHandler(event) {\n    setDescription(event.target.value);\n  }\n\n  // Declares variable so it is global (to create and clear cards (array) added)\n  let buttonArray;\n\n  //submission function\n  function addCardHandler(event) {\n    // stops page from resfreshing thing\n    event.preventDefault();\n\n    // // Tax calculation if above $11.7 million--every dollar above 11.7 million is taxed.\n    // // If below $11.7 million, it displays \"No estate tax (below 11.7 million)\".\n\n    // let newEstate = description;\n\n    // if (newEstate > 11.7) {\n    //   newEstate = (newEstate - 11.7) * 0.4;\n    //   newEstate = newEstate.toFixed(2);\n    //   // newEstate = `$${newEstate}`;\n    // } else {\n    //   newEstate = 0;\n    //   // newEstate = `$${newEstate}`;\n    // }\n\n    //new dynamic array is constructed\n    buttonArray = [{ task: task, description: description }];\n\n    props.getDiv(buttonArray[0]);\n    setTask(\"\");\n    setDescription(\"\");\n  }\n\n  //Function for clearing data (second submit form)\n  function clearHandler() {\n    buttonArray = undefined;\n  }\n\n  return (\n    <div className=\"inputArea\">\n      <div className=\"left\">\n      <h1>Austin Hansen</h1>\n        <h2>React Developer</h2>\n        <p>Here's a snapshot of what I like working on.</p>\n        <p>\n          It's a tool I made for financial advisors who manage millions of\n          dollars for wealthy clientele. This tool helps identify how much will\n          be owed in estate tax after the client's passing.\n        </p>\n        <p>Try it out!</p>\n        <p>Tip: Estate values usually exceed $11,000,000</p>\n      </div>\n      <form className=\"right\" onSubmit={addCardHandler}>\n        <div className=\"parentField\">\n          <label>Client's Name</label>\n          <input\n            className=\"taskField\"\n            type=\"text\"\n            value={task}\n            onChange={taskHandler}\n            autoFocus\n            required\n          />\n        </div>\n        <div className=\"parentField\">\n          <label>Estate Value ($)</label>\n          <input\n            type=\"number\"\n            className=\"descriptionField\"\n            value={description}\n            onChange={descriptionHandler}\n            required\n            min=\"0\"\n            step=\"1\"\n            placeholder=\"e.g. 14000000\"\n          />\n        </div>\n        {/* buttonss --------- */}\n        <div className=\"buttonParent\">\n          <button className=\"button\" type=\"submit\">\n            CALCULATE\n          </button>\n        </div>\n\n        <form className=\"buttonParent\" onSubmit={clearHandler}>\n          <button className=\"button\" type=\"submit\">\n            CLEAR\n          </button>\n        </form>\n      </form>\n    </div>\n  );\n}\n\nexport default Button;\n","import \"./Graph.css\";\n\nfunction Graph(props) {\n  //css fill-bar graph % calculation\n  let barFillWidth = props.description;\n  barFillWidth = Math.round((11700000 / barFillWidth) * 100) + \"%\";\n\n  //  css border elimination when non-taxable fill is 100%\n  let endBorder = 0;\n  if (props.description > 11700000) {\n    endBorder = 5 + \"px solid rgb(10, 42, 63)\";\n  } else {\n    endBorder = 0 + \"px\";\n  }\n\n  //   ------------\n\n  //   non-taxable calculation\n  let nonTaxableEstateValue = 0;\n  if (props.description > 11700000) {\n    nonTaxableEstateValue = 11700000;\n  } else {\n    nonTaxableEstateValue = Number(props.description);\n  }\n  nonTaxableEstateValue = nonTaxableEstateValue.toLocaleString();\n\n  //  taxable calculation: for legend near the bar chart\n  let taxableEstateValue = props.description;\n  if (taxableEstateValue > 11700000) {\n    taxableEstateValue = props.description - 11700000;\n  } else {\n    taxableEstateValue = 0;\n  }\n  taxableEstateValue = taxableEstateValue.toLocaleString();\n\n  //   total estate value\n  let totalValue = props.description;\n  totalValue = Number(totalValue).toLocaleString();\n\n  return (\n    <div className=\"bar-area\">\n      <div className=\"base-bar\">\n        <div\n          className=\"fill-bar\"\n          style={{ width: barFillWidth, borderRight: endBorder }}\n        ></div>\n      </div>\n\n      <div className=\"second-base-bar\"></div>\n      <div className=\"labels\">\n        <div className=\"label1\">Non-taxable: ${nonTaxableEstateValue}</div>\n        <div className=\"label2\">+ Taxable: ${taxableEstateValue}</div>\n        <div className=\"label3\">= Total Estate Value: ${totalValue}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Graph;\n","import \"./User.css\";\n\nfunction User(props) {\n  return (\n    <div>\n      <h3 className=\"user-format\">{props.task}</h3>\n    </div>\n  );\n}\n\nexport default User;\n","import \"./UserJob.css\";\n\nfunction UserJob(props) {\n  // Tax calculation if above $11.7 million--every dollar above 11.7 million is taxed.\n  // If below $11.7 million, it displays \"No estate tax (below 11.7 million)\".\n  let newEstate = props.description;\n  if (newEstate > 11700000) {\n    newEstate = Math.round((newEstate - 11700000) * 0.4);\n    newEstate = newEstate.toLocaleString();\n  } else {\n    newEstate = 0;\n  }\n\n  // if statement for paragraph that appears below tax number owed.\n  let aboveText = \"\";\n  let taxesText = \"\";\n  if (props.description > 11700000) {\n    aboveText = \"Will pay:\";\n    taxesText = \"in estate taxes\";\n  } else {\n    taxesText = \"No estate taxes owed\";\n  }\n\n  return (\n    <div>\n      <p className=\"text-around-number\">{aboveText}</p>\n      <p className=\"num-owed\">${newEstate}</p>\n      <p className=\"text-around-number\">{taxesText}</p>\n    </div>\n  );\n}\n\nexport default UserJob;\n","import \"./TileAreaContent.css\";\nimport Graph from \"./Graph\";\n\nimport User from \"./User\";\nimport UserJob from \"./UserJob\";\n\nfunction TileCard(props) {\n  return (\n    <div className=\"eachClientTile\">\n      <User task={props.task} />\n      <UserJob description={props.description} />\n      <Graph description={props.description} />\n    </div>\n  );\n}\n\nexport default TileCard;\n","import \"./TileAreaContent.css\";\nimport TileCard from \"./TileCard\";\n\nfunction TileAreaContent(props) {\n  // number to display in account window\n  let numDisplay = (props.totalTax - 11700000) * 0.4;\n  if (numDisplay > 0) {\n    numDisplay = Number(numDisplay.toFixed());\n    numDisplay = `$${numDisplay.toLocaleString()}`;\n  } else {\n    numDisplay = null;\n  }\n\n  // declares variable to be used in if statement\n  let suggestionsComp = null;\n\n  // Suggestions section: appears if calculation is done.\n  if (props.counter > 0) {\n    suggestionsComp = (\n      <div className=\"tile\">\n        {/*-\n         below are the client tiles: \n         -*/}\n        <div className=\"aroundClientTiles\">\n          {props.item.map((mapArray) => (\n            <TileCard task={mapArray.task} description={mapArray.description} />\n          ))}\n        </div>\n\n        {/* div for right side suggestions and newsletter */}\n        <div className=\"rightBoxesParent\">\n          <div className=\"newsletter\">\n            <form>\n              <h2>Get Our Newsletter</h2>\n              <p>And get some great updates</p>\n              <label>Email </label>\n              <input type=\"email\" className=\"inputNewsletter\" required></input>\n              <button type=\"submit\" className=\"buttonNewsletter\">\n                SUBMIT\n              </button>\n            </form>\n          </div>\n\n          <div className=\"account-window\">\n            <h2>\n              Help {props.clientRecent} save {numDisplay} on Estate Tax today\n            </h2>\n            <div className=\"account-window-buttons\">\n              <button className=\"create-account-button\">Create Account</button>\n              <button className=\"login-button\">Login</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  } else {\n    suggestionsComp = null;\n  }\n\n  return suggestionsComp;\n}\n\nexport default TileAreaContent;\n","import Button from \"./topTitle&Form/Button\";\nimport TileAreaContent from \"./clientTiles&Sides/TileAreaContent\";\nimport \"./clientTiles&Sides/TileAreaContent.css\";\n\n//when counter is higher than 1, suggestions div will appear. AKA, button is pushed in Button.js, triggers a ++ in getDivHandler. The value for counter is passed to TileAreaContent and 'if statement' is processed.\nlet counter = 0;\n\nfunction TileArea(props) {\n  // Gets array variable from Button.js and passes it to App.js\n  function getDivHandler(cardFromButton) {\n    console.log(\"TileArea.js\");\n    props.getToApp(cardFromButton);\n    counter++;\n  }\n\n  return (\n    <div>\n      <Button getDiv={getDivHandler} />\n      <TileAreaContent\n        item={props.item}\n        counter={counter}\n        clientRecent={props.clientRecent}\n        totalTax={props.totalTax}\n      />\n    </div>\n  );\n}\n\nexport default TileArea;\n","import React, { useState } from \"react\";\nimport TileArea from \"./components/TileArea\";\nimport \"./components/clientTiles&Sides/TileAreaContent.css\";\n\nconst dataObject = [\n  { task: \"(Client's name)\", description: \"(Amount in estate tax)\" },\n];\n\nfunction App() {\n  const [data, newData] = useState(dataObject);\n\n  function addCardHandler(newCardArray) {\n\n   \n\n    newData((previousData) => {\n      \n      previousData = \"\";\n\n      return [newCardArray, ...previousData];\n    });\n    console.log(data);\n  }\n\n  return (\n    <div className=\"fullSite\">\n      <TileArea\n        item={data}\n        getToApp={addCardHandler}\n        clientRecent={data[0].task}\n        totalTax={data[0].description}\n      />\n      ;\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}