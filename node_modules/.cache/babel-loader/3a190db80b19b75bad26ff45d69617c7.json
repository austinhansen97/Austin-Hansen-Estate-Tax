{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Austin\\\\ReactCourse\\\\EstatePal-App-master(July 30th)\\\\EstatePal-App-master\\\\src\\\\components\\\\clientTiles&Sides\\\\Graph.js\";\nimport \"./Graph.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Graph(props) {\n  //css fill-bar graph % calculation\n  let barFillWidth = props.description;\n  barFillWidth = Math.round(11700000 / barFillWidth * 100) + \"%\"; //  css border elimination when non-taxable fill is 100%\n\n  let endBorder = 0;\n\n  if (props.description > 11700000) {\n    endBorder = 5 + \"px solid rgb(10, 42, 63)\";\n  } else {\n    endBorder = 0 + \"px\";\n  } //   ------------\n  //   non-taxable calculation\n\n\n  let nonTaxableEstateValue = 0;\n\n  if (props.description > 11700000) {\n    nonTaxableEstateValue = 11700000;\n  } else {\n    nonTaxableEstateValue = Number(props.description);\n  }\n\n  nonTaxableEstateValue = nonTaxableEstateValue.toLocaleString(); //  taxable calculation: for legend near the bar chart\n\n  let taxableEstateValue = props.description;\n\n  if (taxableEstateValue > 11700000) {\n    taxableEstateValue = props.description - 11700000;\n  } else {\n    taxableEstateValue = 0;\n  }\n\n  taxableEstateValue = taxableEstateValue.toLocaleString(); //   total estate value\n\n  let totalValue = props.description;\n  totalValue = Number(totalValue).toLocaleString();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bar-area\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"base-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fill-bar\",\n        style: {\n          width: barFillWidth,\n          borderRight: endBorder\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"second-base-bar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"labels\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"label1\",\n        children: [\"Non-taxable: $\", nonTaxableEstateValue]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"label2\",\n        children: [\"+ Taxable: $\", taxableEstateValue]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"label3\",\n        children: [\"= Total Estate Value: $\", totalValue]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["C:/Users/Austin/ReactCourse/EstatePal-App-master(July 30th)/EstatePal-App-master/src/components/clientTiles&Sides/Graph.js"],"names":["Graph","props","barFillWidth","description","Math","round","endBorder","nonTaxableEstateValue","Number","toLocaleString","taxableEstateValue","totalValue","width","borderRight"],"mappings":";AAAA,OAAO,aAAP;;;AAEA,SAASA,KAAT,CAAeC,KAAf,EAAsB;AACpB;AACA,MAAIC,YAAY,GAAGD,KAAK,CAACE,WAAzB;AACAD,EAAAA,YAAY,GAAGE,IAAI,CAACC,KAAL,CAAY,WAAWH,YAAZ,GAA4B,GAAvC,IAA8C,GAA7D,CAHoB,CAKpB;;AACA,MAAII,SAAS,GAAG,CAAhB;;AACA,MAAIL,KAAK,CAACE,WAAN,GAAoB,QAAxB,EAAkC;AAChCG,IAAAA,SAAS,GAAG,IAAI,0BAAhB;AACD,GAFD,MAEO;AACLA,IAAAA,SAAS,GAAG,IAAI,IAAhB;AACD,GAXmB,CAapB;AAEA;;;AACA,MAAIC,qBAAqB,GAAG,CAA5B;;AACA,MAAIN,KAAK,CAACE,WAAN,GAAoB,QAAxB,EAAkC;AAChCI,IAAAA,qBAAqB,GAAG,QAAxB;AACD,GAFD,MAEO;AACLA,IAAAA,qBAAqB,GAAGC,MAAM,CAACP,KAAK,CAACE,WAAP,CAA9B;AACD;;AACDI,EAAAA,qBAAqB,GAAGA,qBAAqB,CAACE,cAAtB,EAAxB,CAtBoB,CAwBpB;;AACA,MAAIC,kBAAkB,GAAGT,KAAK,CAACE,WAA/B;;AACA,MAAIO,kBAAkB,GAAG,QAAzB,EAAmC;AACjCA,IAAAA,kBAAkB,GAAGT,KAAK,CAACE,WAAN,GAAoB,QAAzC;AACD,GAFD,MAEO;AACLO,IAAAA,kBAAkB,GAAG,CAArB;AACD;;AACDA,EAAAA,kBAAkB,GAAGA,kBAAkB,CAACD,cAAnB,EAArB,CA/BoB,CAiCpB;;AACA,MAAIE,UAAU,GAAGV,KAAK,CAACE,WAAvB;AACAQ,EAAAA,UAAU,GAAGH,MAAM,CAACG,UAAD,CAAN,CAAmBF,cAAnB,EAAb;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE;AACE,QAAA,SAAS,EAAC,UADZ;AAEE,QAAA,KAAK,EAAE;AAAEG,UAAAA,KAAK,EAAEV,YAAT;AAAuBW,UAAAA,WAAW,EAAEP;AAApC;AAFT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAQE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YARF,eASE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,qCAAuCC,qBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,mCAAqCG,kBAArC;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,8CAAgDC,UAAhD;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;KAtDQX,K;AAwDT,eAAeA,KAAf","sourcesContent":["import \"./Graph.css\";\n\nfunction Graph(props) {\n  //css fill-bar graph % calculation\n  let barFillWidth = props.description;\n  barFillWidth = Math.round((11700000 / barFillWidth) * 100) + \"%\";\n\n  //  css border elimination when non-taxable fill is 100%\n  let endBorder = 0;\n  if (props.description > 11700000) {\n    endBorder = 5 + \"px solid rgb(10, 42, 63)\";\n  } else {\n    endBorder = 0 + \"px\";\n  }\n\n  //   ------------\n\n  //   non-taxable calculation\n  let nonTaxableEstateValue = 0;\n  if (props.description > 11700000) {\n    nonTaxableEstateValue = 11700000;\n  } else {\n    nonTaxableEstateValue = Number(props.description);\n  }\n  nonTaxableEstateValue = nonTaxableEstateValue.toLocaleString();\n\n  //  taxable calculation: for legend near the bar chart\n  let taxableEstateValue = props.description;\n  if (taxableEstateValue > 11700000) {\n    taxableEstateValue = props.description - 11700000;\n  } else {\n    taxableEstateValue = 0;\n  }\n  taxableEstateValue = taxableEstateValue.toLocaleString();\n\n  //   total estate value\n  let totalValue = props.description;\n  totalValue = Number(totalValue).toLocaleString();\n\n  return (\n    <div className=\"bar-area\">\n      <div className=\"base-bar\">\n        <div\n          className=\"fill-bar\"\n          style={{ width: barFillWidth, borderRight: endBorder }}\n        ></div>\n      </div>\n\n      <div className=\"second-base-bar\"></div>\n      <div className=\"labels\">\n        <div className=\"label1\">Non-taxable: ${nonTaxableEstateValue}</div>\n        <div className=\"label2\">+ Taxable: ${taxableEstateValue}</div>\n        <div className=\"label3\">= Total Estate Value: ${totalValue}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}