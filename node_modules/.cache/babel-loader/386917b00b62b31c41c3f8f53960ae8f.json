{"ast":null,"code":"import\"./Graph.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Graph(props){//css fill-bar graph % calculation\nvar barFillWidth=props.description;barFillWidth=Math.round(11700000/barFillWidth*100)+\"%\";//  css border elimination when non-taxable fill is 100%\nvar endBorder=0;if(props.description>11700000){endBorder=5+\"px solid rgb(10, 42, 63)\";}else{endBorder=0+\"px\";}//   ------------\n//   non-taxable calculation\nvar nonTaxableEstateValue=0;if(props.description>11700000){nonTaxableEstateValue=11700000;}else{nonTaxableEstateValue=Number(props.description);}nonTaxableEstateValue=nonTaxableEstateValue.toLocaleString();//  taxable calculation: for legend near the bar chart\nvar taxableEstateValue=props.description;if(taxableEstateValue>11700000){taxableEstateValue=props.description-11700000;}else{taxableEstateValue=0;}taxableEstateValue=taxableEstateValue.toLocaleString();//   total estate value\nvar totalValue=props.description;totalValue=Number(totalValue).toLocaleString();return/*#__PURE__*/_jsxs(\"div\",{className:\"bar-area\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"base-bar\",children:/*#__PURE__*/_jsx(\"div\",{className:\"fill-bar\",style:{width:barFillWidth,borderRight:endBorder}})}),/*#__PURE__*/_jsx(\"div\",{className:\"second-base-bar\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"labels\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"label1\",children:[\"Non-taxable: $\",nonTaxableEstateValue]}),/*#__PURE__*/_jsxs(\"div\",{className:\"label2\",children:[\"+ Taxable: $\",taxableEstateValue]}),/*#__PURE__*/_jsxs(\"div\",{className:\"label3\",children:[\"= Total Estate Value: $\",totalValue]})]})]});}export default Graph;","map":{"version":3,"sources":["C:/Users/Austin/ReactCourse/EstatePal-App-master(July 30th)/EstatePal-App-master/src/components/clientTiles&Sides/Graph.js"],"names":["Graph","props","barFillWidth","description","Math","round","endBorder","nonTaxableEstateValue","Number","toLocaleString","taxableEstateValue","totalValue","width","borderRight"],"mappings":"AAAA,MAAO,aAAP,C,wFAEA,QAASA,CAAAA,KAAT,CAAeC,KAAf,CAAsB,CACpB;AACA,GAAIC,CAAAA,YAAY,CAAGD,KAAK,CAACE,WAAzB,CACAD,YAAY,CAAGE,IAAI,CAACC,KAAL,CAAY,SAAWH,YAAZ,CAA4B,GAAvC,EAA8C,GAA7D,CAEA;AACA,GAAII,CAAAA,SAAS,CAAG,CAAhB,CACA,GAAIL,KAAK,CAACE,WAAN,CAAoB,QAAxB,CAAkC,CAChCG,SAAS,CAAG,EAAI,0BAAhB,CACD,CAFD,IAEO,CACLA,SAAS,CAAG,EAAI,IAAhB,CACD,CAED;AAEA;AACA,GAAIC,CAAAA,qBAAqB,CAAG,CAA5B,CACA,GAAIN,KAAK,CAACE,WAAN,CAAoB,QAAxB,CAAkC,CAChCI,qBAAqB,CAAG,QAAxB,CACD,CAFD,IAEO,CACLA,qBAAqB,CAAGC,MAAM,CAACP,KAAK,CAACE,WAAP,CAA9B,CACD,CACDI,qBAAqB,CAAGA,qBAAqB,CAACE,cAAtB,EAAxB,CAEA;AACA,GAAIC,CAAAA,kBAAkB,CAAGT,KAAK,CAACE,WAA/B,CACA,GAAIO,kBAAkB,CAAG,QAAzB,CAAmC,CACjCA,kBAAkB,CAAGT,KAAK,CAACE,WAAN,CAAoB,QAAzC,CACD,CAFD,IAEO,CACLO,kBAAkB,CAAG,CAArB,CACD,CACDA,kBAAkB,CAAGA,kBAAkB,CAACD,cAAnB,EAArB,CAEA;AACA,GAAIE,CAAAA,UAAU,CAAGV,KAAK,CAACE,WAAvB,CACAQ,UAAU,CAAGH,MAAM,CAACG,UAAD,CAAN,CAAmBF,cAAnB,EAAb,CAEA,mBACE,aAAK,SAAS,CAAC,UAAf,wBACE,YAAK,SAAS,CAAC,UAAf,uBACE,YACE,SAAS,CAAC,UADZ,CAEE,KAAK,CAAE,CAAEG,KAAK,CAAEV,YAAT,CAAuBW,WAAW,CAAEP,SAApC,CAFT,EADF,EADF,cAQE,YAAK,SAAS,CAAC,iBAAf,EARF,cASE,aAAK,SAAS,CAAC,QAAf,wBACE,aAAK,SAAS,CAAC,QAAf,4BAAuCC,qBAAvC,GADF,cAEE,aAAK,SAAS,CAAC,QAAf,0BAAqCG,kBAArC,GAFF,cAGE,aAAK,SAAS,CAAC,QAAf,qCAAgDC,UAAhD,GAHF,GATF,GADF,CAiBD,CAED,cAAeX,CAAAA,KAAf","sourcesContent":["import \"./Graph.css\";\n\nfunction Graph(props) {\n  //css fill-bar graph % calculation\n  let barFillWidth = props.description;\n  barFillWidth = Math.round((11700000 / barFillWidth) * 100) + \"%\";\n\n  //  css border elimination when non-taxable fill is 100%\n  let endBorder = 0;\n  if (props.description > 11700000) {\n    endBorder = 5 + \"px solid rgb(10, 42, 63)\";\n  } else {\n    endBorder = 0 + \"px\";\n  }\n\n  //   ------------\n\n  //   non-taxable calculation\n  let nonTaxableEstateValue = 0;\n  if (props.description > 11700000) {\n    nonTaxableEstateValue = 11700000;\n  } else {\n    nonTaxableEstateValue = Number(props.description);\n  }\n  nonTaxableEstateValue = nonTaxableEstateValue.toLocaleString();\n\n  //  taxable calculation: for legend near the bar chart\n  let taxableEstateValue = props.description;\n  if (taxableEstateValue > 11700000) {\n    taxableEstateValue = props.description - 11700000;\n  } else {\n    taxableEstateValue = 0;\n  }\n  taxableEstateValue = taxableEstateValue.toLocaleString();\n\n  //   total estate value\n  let totalValue = props.description;\n  totalValue = Number(totalValue).toLocaleString();\n\n  return (\n    <div className=\"bar-area\">\n      <div className=\"base-bar\">\n        <div\n          className=\"fill-bar\"\n          style={{ width: barFillWidth, borderRight: endBorder }}\n        ></div>\n      </div>\n\n      <div className=\"second-base-bar\"></div>\n      <div className=\"labels\">\n        <div className=\"label1\">Non-taxable: ${nonTaxableEstateValue}</div>\n        <div className=\"label2\">+ Taxable: ${taxableEstateValue}</div>\n        <div className=\"label3\">= Total Estate Value: ${totalValue}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}